<form action="" method="post">
<div id="cropzee-hidden-canvas" class="image-previewer" data-cropzee="crop"></div><br>
<input id="crop" type="file" name="filename"><br>
<div id="3dcanvas"></div>
</form>
 <script>
  console.log("working");
    require(['jquery','threejs','gltfloader','OrbitControls','canvastoBlob','FileSaver','Croppr'],
    function($,THREE,GLTFLoader,OrbitControls,canvastoblob,FileSaver,Croppr){
      $(document).ready(function ($) {
        var defaultWidth = 210;

// used jQuery.fn.extend() method to provide new methods that can be chained to the jQuery() function
// in our case - $(element).cropzee()
$.fn.extend({
   
  cropzee: function (options = {
  // croppr.js options
  // see https://jamesooi.design/Croppr.js/
  aspectRatio: null,
          maxSize: null,
          minSize: null,
          startSize: [100, 100, '%'],
          onCropStart: null,
          onCropMove: null,
          onCropEnd: null,
          onInitialize: null,
          // lightmodal options
          // see https://hunzaboy.github.io/Light-Modal/#
          modalAnimation: '',
          // cropzee options
          allowedInputs: ['jpg','png','jpeg'], // input extensions supported
          imageExtension: 'image/jpeg', // cropped image/blob file-type 'image/jpeg' | 'image/png' | any other supported by browser
          returnImageMode: 'data-url', // image data mode, 'blob' for blob object or 'data-url' for dataURL
  }) {
      if (options.aspectRatio <= 0) {
          options.aspectRatio = null;
      }
      if (!options.allowedInputs) {
          options.allowedInputs = ['jpg', 'jpeg','png'];
      }
      if (!options.imageExtension) {
          options.imageExtension = 'image/jpeg';
      }
      if (!options.imageExtension) {
          options.imageExtension = 'image/png';
      }
      if (!options.returnImageMode) {
          options.returnImageMode = 'data-url';
      }
      // function to reset input (value) of input, taking in input id
      // resets input value of cropzee input type=file so that same file can be selected twice
      function resetFileInput(id) {
          $('#' + id).val(null);
      }
      window.cropzeeGetImage = function (id) {
        console.log(' window.cropzeeGetImage');
          return cropzeeReturnImage[id];
      };
      console.log(' window.cropzeeGetImage out')
      window.cropzeeRotateImage = function (degree) {
          var image = document.getElementsByClassName('croppr-image')[0];
          var imageClipped = document.getElementsByClassName('croppr-imageClipped')[0];
          var rotateValue = document.getElementById('upload-photo-image-rotate-value');
          var rotateValueText = document.getElementById('upload-photo-image-rotate-value-text');

          image.style.transform = 'rotate(' + degree + 'deg)';
          imageClipped.style.transform = 'rotate(' + degree + 'deg)';
          rotateValue.value = degree;
          rotateValueText.value = degree.replace('.', ',') + '°';
      };
      
      window.cropzeeCreateImage = function (id) {
          var rotateValueEl = document.getElementById('upload-photo-image-rotate-value');
          var rotateValueRad = rotateValueEl.value * (Math.PI / 180);
          var dimensions = cropzeeCroppr.getValue();
          var img = document.getElementsByClassName('croppr-image')[0];
         
          var canvas = document.getElementById('cropzee-hidden-canvas');
          var x = dimensions.width / 2;
          var y = dimensions.height / 2;
          var ctx = canvas.getContext('2d');

          ctx.canvas.width = dimensions.width;
          ctx.canvas.height = dimensions.height;

          ctx.save();

          ctx.translate(dimensions.width / 2, dimensions.height / 2);
          ctx.rotate(rotateValueRad);

          ctx.translate(-dimensions.width / 2, -dimensions.height / 2);
          ctx.drawImage(img, dimensions.x, dimensions.y, dimensions.width, dimensions.height, 0, 0, dimensions.width, dimensions.height);

          ctx.restore();
         
          if (options.returnImageMode == 'blob') {
              canvas.toBlob(function (blob) {
                  window.cropzeeReturnImage = [];
                  cropzeeReturnImage[id] = blob;
              }, options.imageExtension);
          } else {
              window.cropzeeReturnImage = [];
              cropzeeReturnImage[id] = canvas.toDataURL(options.imageExtension);
          }

          // cropping finished, close modal
          render3d(canvas.toDataURL(options.imageExtension))
          closeModal();
      };

      // function to initialize croppr.js on the image inside modal
      // returnMode option is not supported in cropzee
      // see https://jamesooi.design/Croppr.js/
      function cropzeeTriggerCroppr() {
          window.cropzeeCroppr = new Croppr('#cropzee-modal-image', {
              aspectRatio: options.aspectRatio,
              maxSize: options.maxSize,
              minSize: options.minSize,
              startSize: options.startSize,
              onCropStart: options.onCropStart,
              onCropMove: options.onCropMove,
              onCropEnd: options.onCropEnd,
              onInitialize: options.onInitialize
          });
      }
      // function to trigger modal and pass image data to display in the modal
      // function takes in input id and image (to be cropped) data
      function cropzeeTriggerModal(id, src) {
          console.log('triggering')
          // take in animation option and add 'animated' before it
          var animation = options.modalAnimation;
          if (animation) {
              if (animation.indexOf('animated') == -1) {
                  animation = 'animated ' + animation;
              }
          }
          // modal element with dynamic image data, dynamic animation class as supported by animate.css and dynamic input id
          // lightmodal see https://hunzaboy.github.io/Light-Modal/#
          var lightmodalHTML =
                  '<div class="light-modal" id="cropzee-modal" role="dialog" aria-labelledby="light-modal-label" aria-hidden="false" data-lightmodal="close">'
                  + '<div class="light-modal-content ' + animation + '">'
                  + '<!-- light modal header -->'
                  + '<!-- <div class="light-modal-header">'
                  + '<h3 class="light-modal-heading">Cropzee</h3>'
                  + '<a href="www.google.com" class="light-modal-close-icon" aria-label="close">&times;</a>'
                  + '</div> -->'
                  + '<!-- light modal body -->'
                  + '<div class="light-modal-body" style="max-height: 500px;">'
                  + '<img id="cropzee-modal-image" src="' + src + '" style="display:none;">'
                  + '</div>'
                  + '<!-- light modal footer -->'
                  + '<div class="light-modal-footer" style="justify-content: space-between;">'
                  + '<div onclick="closeModal()" class="button btn" aria-label="close">Cancel</div>'
                  + '<input id="upload-photo-image-rotate-value" type="hidden" name="rangeInputValue" value="0">'
                  + '<input id="upload-photo-image-rotate-value-text" class="image-rotate-value" type="text" name="rangeInputValueText" value="0°" readonly>'
                  + '<input oninput="cropzeeRotateImage(this.value)" onchange="cropzeeRotateImage(this.value)" id="upload-photo-image-rotate" class="image-rotate" type="range" name="rangeInput" step="1" min="-180" max="180" value="0">'
                  + '<div onclick="cropzeeCreateImage(`' + id + '`);" class="button btn">Done</div>'
                  + '</div>'
                  + '</div>'
                  + '<canvas style="position: absolute; top: -99999px; left: -99999px;" id="cropzee-hidden-canvas"></canvas>'
                  + '<a style="display:none;" id="cropzee-link"></a>'
                  + '</div>';
          // modal element is appended to body
          console.log('ivada ok ahnn');
          $("body").append(lightmodalHTML);
          // after which the inserted image is drawn onto the hidden canvas within the modal
          setTimeout(function () {
              var canvas = document.getElementById('cropzee-hidden-canvas');
              var ctx = canvas.getContext('2d');
              ctx.canvas.width = cropzeeCanvasWidth;
              ctx.canvas.height = cropzeeCanvasHeight;
              var img = new Image();
              img.src = src;
              ctx.drawImage(img, 0, 0, cropzeeCanvasWidth, cropzeeCanvasHeight);
              setTimeout(function () {
                  // the css-only modal is called via href see https://hunzaboy.github.io/Light-Modal/#
                  window.location = window.location.pathname + "#cropzee-modal";
                  // function to trigger croppr.js on picture in modal
                  cropzeeTriggerCroppr();
              }, 50);
          }, 50);
      }
      // function to capture input and insert it into various elements for previewing and display
      function cropzeeReadURL(input, id) {
          if (input.files && input.files[0]) {
              var reader = new FileReader();

              reader.onload = function (e) {
                  window.cropzeePreviewersLength = $('[data-cropzee="' + id + '"]').length;
                  window.cropzeePreviewCanvas = [];
                  window.cropzeePreviewCanvasContext = [];
                  if (cropzeePreviewersLength) {
                      for (let i = 0; i < cropzeePreviewersLength; i++) {
                          var img = new Image();
                          img.onload = function () {
                              var ratio = img.height / img.width;
                              img.width = 210;
                              cropzeePreviewCanvas[i] = $('[data-cropzee="' + id + '"]')[i];
                              cropzeePreviewCanvasContext[i] = cropzeePreviewCanvas[i].getContext('2d');
                              cropzeePreviewCanvasContext[i].canvas.width = $(cropzeePreviewCanvas[i]).width() || (defaultWidth + increment);
                              window.cropzeeCanvasWidth = $(cropzeePreviewCanvas[i]).width() || (defaultWidth + increment);
                              cropzeePreviewCanvasContext[i].canvas.height = cropzeePreviewCanvasContext[i].canvas.width * ratio;
                              window.cropzeeCanvasHeight = $(cropzeePreviewCanvas[i]).height() || 'auto';
                              cropzeePreviewCanvasContext[i].drawImage(img, 0, 0, cropzeeCanvasWidth, cropzeeCanvasHeight);
                          };
                          img.src = e.target.result;
                      }
                  }
                  cropzeeTriggerModal(id, e.target.result);
              };
              reader.readAsDataURL(input.files[0]);
          }
      }
      // function to close modal when user clicks outside modal
      $(document).click(function (e) {
          console.log("modal");
          if ($(e.target).is('#cropzee-modal')) {
              closeModal();
          }
      });
      // function that is called first, when input is triggered
      // it resets input value to enable the reloading of the same image just in case
      $(this).click(function () {
          var cropzeeInputId = $(this).attr('id');
          resetFileInput(cropzeeInputId);
          // when image is selected, the image-previewers are transformed to canvases
          // then the input data is passed to be read for previewing
          $(this).one("change", function () {
              var ext = $('#' + cropzeeInputId).val().split('.').pop().toLowerCase();
              if ($.inArray(ext, options.allowedInputs) == -1) {
                  alert('invalid extension! Please check your input file and try again.');
                  resetFileInput(cropzeeInputId);
              } else {
                  var previewerId = $('[data-cropzee="' + cropzeeInputId + '"]').attr("id");
                  var previewerClass = $('[data-cropzee="' + cropzeeInputId + '"]').attr("class");
                  $('[data-cropzee="' + cropzeeInputId + '"]').replaceWith('<canvas id="' + previewerId + '" class="' + previewerClass + '" data-cropzee="' + cropzeeInputId + '"></canvas>');
                  // input data is passed to be read for previewing
                  // function takes in input object and its id
                  cropzeeReadURL(this, cropzeeInputId);
              }
          });
      });
  }
});
// function to close modal
function closeModal() {
    console.log('closemodal function')
  $('#cropzee-modal').remove();
  window.location = window.location.pathname + '#';
}

// const canvas = document.querySelector('.webgl')
const scene = new THREE.Scene()
scene.background = new THREE.Color(0xdddddd);

function encodeImageFileAsURL(file) {
var reader = new FileReader();
const promise = new Promise((resolve, reject) => {
reader.onloadend = () => {
resolve(reader.result);
};
reader.onerror = () => reject(new Error("Something happened"));
});
reader.readAsDataURL(file);
return promise;
}

function render3d(imagedata){
  const canvas = document.createElement('canvas');
  const canvasContainer = document.getElementById('3dcanvas');
  canvas.width = "400";
canvas.height = "400";
canvas.style ="border: 1px solid black";
canvasContainer.innerHTML = "";
canvasContainer.appendChild(canvas);
var loader = new THREE.TextureLoader();

var texture = loader.load(imagedata, function (texture) {
  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
  texture.flipY = false;
});

var loader = new THREE.GLTFLoader();
loader.load("<?php echo $this->getViewFileUrl('Ajith_Test::10141149.glb'); ?>", (gltf) => {
  var model = gltf.scene;
  model.traverse((o) => {
    if (o.isMesh) {
      o.material.map = texture;
      model.scale.set(0.05, 0.05, 0.05)
    }
  });
  scene.add(model);
});

const light = new THREE.DirectionalLight(0xffffff, 1)
light.position.set(5, 5, 5)
scene.add(light)
const light2 = new THREE.AmbientLight(0xffffff, 1)
light2.position.set(0, 0, 0)
scene.add(light2)
// const light3 = new THREE.PointLight(0xffffff,10);
// light3.position.set(0,0,0);
// scene.add(light3);

var fov = 75;
var aspectRatio = canvas.width / canvas.height;
var nearPlane = 0.1;
var farPlane = 100;
const camera = new THREE.PerspectiveCamera(fov, aspectRatio, nearPlane, farPlane);

// const camera = new THREE.PerspectiveCamera(75, sizes.width/sizes.height,0.1, 100)
camera.position.set(0, 1, 2)
scene.add(camera)
const renderer = new THREE.WebGL1Renderer({
    antialias: true,
  canvas: canvas
})

renderer.setSize(canvas.width, canvas.height)
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
renderer.shadowMap.enabled = true
// renderer.gammaOutput = true
renderer.render(scene, camera)
controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.autoRotate = true;
function animate() {
  requestAnimationFrame(animate)
  renderer.render(scene, camera)
}

animate()

}
$("#crop").cropzee();
});
});
    
    console.log("working6");
  
    </script>